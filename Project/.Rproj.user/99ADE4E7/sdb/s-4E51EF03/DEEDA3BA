{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Housing Data Exploratory Analysis\"\nauthor: \"AiO\"\ndate: \"September 26, 2016\"\noutput: html_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n\n```{r housing}\nload.libraries <- c('data.table', 'testthat', 'gridExtra', 'corrplot', 'GGally', 'ggplot2', 'e1071', 'dplyr')\ninstall.lib <- load.libraries[!load.libraries %in% installed.packages()]\nfor(libs in install.lib) install.packages(libs, dependences = TRUE)\nsapply(load.libraries, require, character = TRUE)\n\n\n\n\n\n```\n\n\n```{r, echo = FALSE}\n\ntrain <- fread('../input/train.csv',colClasses=c('MiscFeature' = \"character\", 'PoolQC' = 'character', 'Alley' = 'character'))\ntest <- fread('../input/test.csv' ,colClasses=c('MiscFeature' = \"character\", 'PoolQC' = 'character', 'Alley' = 'character'))\n```\n\n```{r}\ncat_var <- names(train)[which(sapply(train, is.character))]\ncat_car <- c(cat_var, 'BedroomAbvGr', 'HalfBath', ' KitchenAbvGr','BsmtFullBath', 'BsmtHalfBath', 'MSSubClass')\nnumeric_var <- names(train)[which(sapply(train, is.numeric))]\n```\n\n## Structure of the data\nThe housing data set has 1460 rows and 81 features with the target feature Sale Price.\n\n```{r structure}\ndim(train)\nstr(train)\n\n```\n\n\n# Summarize the missing values in the data.\n\nViewing the first five rows of the data indicates that there are columns which have missing values. The categorical variables with the largest number of missing values are: Alley,  FirePlaceQu, PoolQC, Fence, and MiscFeature.\n\n* Alley: indicates the type of alley access\n* FirePlaceQu: FirePlace Quality\n* PoolQC: Pool Quality\n* Fence: Fence Quality\n* MiscFeature: Miscellaneous features not covered in other categories\n\nThe missing values indicate that majority of the houses do not have alley access, no pool, no fence and no elevator, 2nd garage, shed or tennis court that is covered by the MiscFeature.\n\nThe numeric variables do not have as many missing values but there are still some present. There are 259 values for the LotFrontage, 8 missing values for MasVnrArea and 81 missing values for GarageYrBlt.\n\n* LotFrontage: Linear feet of street connected to property\n* GarageYrBlt: Year garage was built\n* MasVnrArea: Masonry veener area in square feet\n\nDefinition of Masonry Veener from google:\nVeneer masonry is a popular choice for home building and remodeling, because it gives the appearance of a solid brick or stone wall while providing better economy and insulation. It can be used as an addition to conventional wood frame structures, and can be placed on concrete block walls. \n\nBrick veeners are not essential to the stucture of the house but are used to chance the appearance of the wall while providing better insulation. They tend to only have one brick layer.\n\n\n```{r missing data}\nhead(train)\ncolSums(sapply(train, is.na))\ncolSums(sapply(train[,.SD, .SDcols = cat_var], is.na))\ncolSums(sapply(train[,.SD, .SDcols = numeric_var], is.na))\n\n```\n\nVisualization for the missing data.\n\n```{r missing data_2}\n\nplot_Missing <- function(data_in, title = NULL){\n  temp_df <- as.data.frame(ifelse(is.na(data_in), 0, 1))\n  temp_df <- temp_df[,order(colSums(temp_df))]\n  data_temp <- expand.grid(list(x = 1:nrow(temp_df), y = colnames(temp_df)))\n  data_temp$m <- as.vector(as.matrix(temp_df))\n  data_temp <- data.frame(x = unlist(data_temp$x), y = unlist(data_temp$y), m = unlist(data_temp$m))\n  ggplot(data_temp) + geom_tile(aes(x=x, y=y, fill=factor(m))) + scale_fill_manual(values=c(\"white\", \"black\"), name=\"Missing\\n(0=Yes, 1=No)\") + theme_light() + ylab(\"\") + xlab(\"\") + ggtitle(title)\n}\n\n\nplot_Missing(train[,colSums(is.na(train)) > 0, with = FALSE])\n```\n\nLet's gain some insight on the number of houses that were remodeled. According to the data dictionary, if the YearBuilt date is different from the YearRemodAdd date then the house was remodeled. Comparing these two rows indicates that 696 houses were remodeled and 764 houses were not remodeled.\n\n\n\n```{r}\nsum(train[,'YearRemodAdd', with = FALSE] != train[,'YearBuilt', with = FALSE])\n\ncat('Percentage of houses remodeled',sum(train[,'YearRemodAdd', with = FALSE] != train[,'YearBuilt', with = FALSE])/ dim(train)[1])\n\n\ntrain %>% select(YearBuilt, YearRemodAdd) %>%    mutate(Remodeled = as.integer(YearBuilt != YearRemodAdd)) %>% ggplot(aes(x= factor(x = Remodeled, labels = c( 'No','Yes')))) + geom_bar() + xlab('Remodeled') + theme_light()\n\n\n\n\n```\n\n## Summarize the numeric values and the structure of the data.\n\n```{r traistructures}\n\nsummary(train[,.SD, .SDcols =numeric_var])\n\ncat('Train has', dim(train)[1], 'rows and', dim(train)[2], 'columns.')\ncat('Test has', dim(test)[1], 'rows and', dim(test)[2], ' columns.')\n\n```\n\n\n```{r}\n# The percentage of data missing in train.\nsum(is.na(train)) / (nrow(train) *ncol(train))\n\n# The percentage of data missing in test.\nsum(is.na(test)) / (nrow(test) * ncol(test))\n\n\n```\n\n\n\n\n\n\n```{r}\n# Check for duplicated rows.\n\ncat(\"The number of duplicated rows are\", nrow(train) - nrow(unique(train)))\n\n####Convert character to factors \n\ntrain[,(cat_var) := lapply(.SD, as.factor), .SDcols = cat_var]\n\n\n\n\n```\n\n```{r}\ntrain_cat <- train[,.SD, .SDcols = cat_var]\ntrain_cont <- train[,.SD,.SDcols = numeric_var]\n\nplotHist <- function(data_in, i) {\n  data <- data.frame(x=data_in[[i]])\n  p <- ggplot(data=data, aes(x=factor(x))) + stat_count() + xlab(colnames(data_in)[i]) + theme_light() + \n    theme(axis.text.x = element_text(angle = 90, hjust =1))\n  return (p)\n}\n\ndoPlots <- function(data_in, fun, ii, ncol=3) {\n  pp <- list()\n  for (i in ii) {\n    p <- fun(data_in=data_in, i=i)\n    pp <- c(pp, list(p))\n  }\n  do.call(\"grid.arrange\", c(pp, ncol=ncol))\n}\n\n\nplotDen <- function(data_in, i){\n  data <- data.frame(x=data_in[[i]], SalePrice = data_in$SalePrice)\n  p <- ggplot(data= data) + geom_line(aes(x = x), stat = 'density', size = 1,alpha = 1.0) +\n    xlab(paste0((colnames(data_in)[i]), '\\n', 'Skewness: ',round(skewness(data_in[[i]], na.rm = TRUE), 2))) + theme_light() \n  return(p)\n   \n}\n\n\n```\n\n\n## Barplots for the categorical features\n\nThe bar plots below offer more insight into the data.\nMSZoning: bar plot indicates that majority of the houses are located in low density residential areas and medium density residential area. \n\nThe type of road access to the property tends to be paved and the houses do not have alleys.\n\n* Landcontour: the houses are built on flat properties\n* Utilities: Almost all homes have all public utilities (E,G,W, & S)\n* LandSlope: most of the properties have a gentle slope\n\n```{r categorical}\ndoPlots(train_cat, fun = plotHist, ii = 1:4, ncol = 2)\ndoPlots(train_cat, fun = plotHist, ii  = 4:8, ncol = 2)\ndoPlots(train_cat, fun = plotHist, ii = 8:12, ncol = 2)\ndoPlots(train_cat, fun = plotHist, ii = 13:18, ncol = 2)\ndoPlots(train_cat, fun = plotHist, ii = 18:22, ncol = 2)\n\n```\n\n\nThe houses that have sever landslope are located in the Clear Creek and Timberland. The houses with moderate landslope are present in more neighborhood. The Clear Creek and the Crawford neighborhoods seem to have high slopes. \n\n\n\n\n\n```{r}\ntrain %>% select(LandSlope, Neighborhood, SalePrice) %>% filter(LandSlope == c('Sev', 'Mod')) %>% arrange(Neighborhood) %>% group_by(Neighborhood, LandSlope) %>% summarize(Count = n()) %>% ggplot(aes(Neighborhood, Count)) + geom_bar(aes(fill = LandSlope), position = 'dodge', stat = 'identity') + theme_light() +theme(axis.text.x = element_text(angle = 90, hjust =1))\n\n```\n\n\n\nPlotting a boxplot between the neighboorhoods and sale price shows that BrookSide and South & West of Iowa State University have cheap houses. While Northridge and Northridge Heights are rich neighborhoods with several outliers in terms of price. \n\n```{r}\ntrain %>% select(Neighborhood, SalePrice) %>% ggplot(aes(factor(Neighborhood), SalePrice)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90, hjust =1)) + xlab('Neighborhoods')\n\n```\n\n\n\n\n## Density plots for numeric variables.\n\nDensity plots of the features indicates that the features are skewed. The denisty plot for YearBuilt shows that the data set contains a mix of new and old houses. It shows a downturn in the number of houses in recent years, possibily due to the housing crisis. \n```{r numeric}\n\ndoPlots(train_cont, fun = plotDen, ii = 2:6, ncol = 2)\ndoPlots(train_cont, fun = plotDen, ii = 7:12, ncol = 2)\ndoPlots(train_cont, fun = plotDen, ii = 13:17, ncol = 2)\n\n```\n\n\nThe histograms below show that majority of the houses have 2 full baths, 0 half baths, and have an average of 3 bedrooms.\n\n```{r}\ndoPlots(train_cont, fun = plotHist, ii = 18:23, ncol = 2)\n\n```\n\n## Explore the correlation\n```{r, fig.height= 10, fig.width= 10}\ncorrelations <- cor(na.omit(train_cont[,-1, with = FALSE]))\n\n# correlations\nrow_indic <- apply(correlations, 1, function(x) sum(x > 0.3 | x < -0.3) > 1)\n\ncorrelations<- correlations[row_indic ,row_indic ]\ncorrplot(correlations, method=\"square\")\n\n\n\n\n```\n\n\n\n## Plot scatter plot for variables that have high correlation.\nThe correlation matrix below shows that there are several variables that are strongly and positively correlated with housing price.\n\nHigh positive correlation:\n\n* OverallQual\n* YearBuilt\n* YearRemodAdd\n* MasvnrArea\n* BsmtFinSF1\n* TotalBsmtSF\n* 1stFlrSF\n* GrLiveArea\n* FullBath\n* TotRmsAbvGrd\n* FirePlaces\n* GarageYrBlt\n* GarageCars\n* GarageArea\n* WoodDeskSF\n* OpenPorchSF\n\nThe number of enclosed porches are negatively correlated with year built. It seems that potential housebuyers do not want an enclosed porch and house developers have been building less enclosed porches in recent years. It is also negatively correlated with SalePrice, which makes sense. \n\nThere is some slight negative correlation between OverallCond and SalePrice. There is also strong negative correlation between Yearbuilt and OverallCond. It seems to be that recently built houses tend to been in worse Overall Condition. \n\n\n\n```{r}\ntrain %>% select(OverallCond, YearBuilt) %>% ggplot(aes(factor(OverallCond),YearBuilt)) + geom_boxplot() + xlab('Overall Condition')\n\n```\n\n\n\n```{r}\n\nplotCorr <- function(data_in, i){\n  data <- data.frame(x = data_in[[i]], SalePrice = data_in$SalePrice)\n  p <- ggplot(data, aes(x = x, y = SalePrice)) + geom_point(shape = 1, na.rm = TRUE) + geom_smooth(method = lm ) + xlab(paste0(colnames(data_in)[i], '\\n', 'R-Squared: ', round(cor(data_in[[i]], data$SalePrice, use = 'complete.obs'), 2))) + theme_light()\n  return(suppressWarnings(p))\n}\n\n\nhighcorr <- c(names(correlations[,'SalePrice'])[which(correlations[,'SalePrice'] > 0.5)], names(correlations[,'SalePrice'])[which(correlations[,'SalePrice'] < -0.2)])\n \ndata_corr <- train[,highcorr, with = FALSE]\n\n\ndoPlots(data_corr, fun = plotCorr, ii = 1:6)\n\ndoPlots(data_corr, fun = plotCorr, ii = 6:11)\n\n\n```\n\n\nThe histogram for the response variable SalePrice shows that it is skewed. Taking the log of the variable normalizes it. \n\n```{r}\nlibrary(scales)\nggplot(train, aes(x=SalePrice)) + geom_histogram(col = 'white') + theme_light() +scale_x_continuous(labels = comma)\nsummary(train[,.(SalePrice)])\n#Normalize distribution\nggplot(train, aes(x=log(SalePrice+1))) + geom_histogram(col = 'white') + theme_light()\n\n```\n\n\n\n",
    "created" : 1496948226956.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2912533397",
    "id" : "DEEDA3BA",
    "lastKnownWriteTime" : 1496880387,
    "last_content_update" : 1496880387,
    "path" : "~/STAT 6620/script (1).Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}